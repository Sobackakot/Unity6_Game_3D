//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Scripts/InputSystem/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""ActionMaps"",
            ""id"": ""a68672b2-b7d2-4e9c-896f-fa23e89e59ef"",
            ""actions"": [
                {
                    ""name"": ""GetAxisDirectionMove"",
                    ""type"": ""Value"",
                    ""id"": ""de53db69-ab73-4c75-8af1-5a883aebddd4"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""GetKeyDownJump"",
                    ""type"": ""Button"",
                    ""id"": ""a848dc71-4e52-4ae5-99f7-1e626a17f6d8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""GetKeyRun"",
                    ""type"": ""Button"",
                    ""id"": ""dcefffe8-6633-42cb-8cce-49982b8d5bc2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseDelta"",
                    ""type"": ""Value"",
                    ""id"": ""6c984cd9-66be-40ce-a1e6-60e8be762111"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MouseScroll"",
                    ""type"": ""Value"",
                    ""id"": ""9aa15aa9-156b-48ce-8e9f-66dc8e34453c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MouseMidle"",
                    ""type"": ""Button"",
                    ""id"": ""ed724957-cc64-4f42-9674-b7001646bf5d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""70dbf33c-e1e2-463a-82d1-483533d54ccc"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GetAxisDirectionMove"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""148f7171-ca78-4fac-8fdf-58523b7a24fd"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GetAxisDirectionMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""517a9ff4-6b67-402e-8ebd-eb6eafcac76c"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GetAxisDirectionMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""0102949d-1d67-4526-8db4-b04df422d31d"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GetAxisDirectionMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""2672bc91-c27a-4284-af34-245c5b7f16b2"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GetAxisDirectionMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""452188e0-1b65-41fb-8fc0-b8d6e58ad865"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GetKeyDownJump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e415af9c-2bf6-4559-af2f-effd1493cda1"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GetKeyRun"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""904195e2-837f-4f12-a921-868fff9ea711"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseDelta"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c6ea02be-c4b5-4e43-bb52-fb1507a6ac03"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseScroll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7ec7e32e-83ec-48c3-b5f5-57489fb92082"",
                    ""path"": ""<Mouse>/middleButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseMidle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // ActionMaps
        m_ActionMaps = asset.FindActionMap("ActionMaps", throwIfNotFound: true);
        m_ActionMaps_GetAxisDirectionMove = m_ActionMaps.FindAction("GetAxisDirectionMove", throwIfNotFound: true);
        m_ActionMaps_GetKeyDownJump = m_ActionMaps.FindAction("GetKeyDownJump", throwIfNotFound: true);
        m_ActionMaps_GetKeyRun = m_ActionMaps.FindAction("GetKeyRun", throwIfNotFound: true);
        m_ActionMaps_MouseDelta = m_ActionMaps.FindAction("MouseDelta", throwIfNotFound: true);
        m_ActionMaps_MouseScroll = m_ActionMaps.FindAction("MouseScroll", throwIfNotFound: true);
        m_ActionMaps_MouseMidle = m_ActionMaps.FindAction("MouseMidle", throwIfNotFound: true);
    }

    ~@InputActions()
    {
        UnityEngine.Debug.Assert(!m_ActionMaps.enabled, "This will cause a leak and performance issues, InputActions.ActionMaps.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // ActionMaps
    private readonly InputActionMap m_ActionMaps;
    private List<IActionMapsActions> m_ActionMapsActionsCallbackInterfaces = new List<IActionMapsActions>();
    private readonly InputAction m_ActionMaps_GetAxisDirectionMove;
    private readonly InputAction m_ActionMaps_GetKeyDownJump;
    private readonly InputAction m_ActionMaps_GetKeyRun;
    private readonly InputAction m_ActionMaps_MouseDelta;
    private readonly InputAction m_ActionMaps_MouseScroll;
    private readonly InputAction m_ActionMaps_MouseMidle;
    public struct ActionMapsActions
    {
        private @InputActions m_Wrapper;
        public ActionMapsActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @GetAxisDirectionMove => m_Wrapper.m_ActionMaps_GetAxisDirectionMove;
        public InputAction @GetKeyDownJump => m_Wrapper.m_ActionMaps_GetKeyDownJump;
        public InputAction @GetKeyRun => m_Wrapper.m_ActionMaps_GetKeyRun;
        public InputAction @MouseDelta => m_Wrapper.m_ActionMaps_MouseDelta;
        public InputAction @MouseScroll => m_Wrapper.m_ActionMaps_MouseScroll;
        public InputAction @MouseMidle => m_Wrapper.m_ActionMaps_MouseMidle;
        public InputActionMap Get() { return m_Wrapper.m_ActionMaps; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ActionMapsActions set) { return set.Get(); }
        public void AddCallbacks(IActionMapsActions instance)
        {
            if (instance == null || m_Wrapper.m_ActionMapsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ActionMapsActionsCallbackInterfaces.Add(instance);
            @GetAxisDirectionMove.started += instance.OnGetAxisDirectionMove;
            @GetAxisDirectionMove.performed += instance.OnGetAxisDirectionMove;
            @GetAxisDirectionMove.canceled += instance.OnGetAxisDirectionMove;
            @GetKeyDownJump.started += instance.OnGetKeyDownJump;
            @GetKeyDownJump.performed += instance.OnGetKeyDownJump;
            @GetKeyDownJump.canceled += instance.OnGetKeyDownJump;
            @GetKeyRun.started += instance.OnGetKeyRun;
            @GetKeyRun.performed += instance.OnGetKeyRun;
            @GetKeyRun.canceled += instance.OnGetKeyRun;
            @MouseDelta.started += instance.OnMouseDelta;
            @MouseDelta.performed += instance.OnMouseDelta;
            @MouseDelta.canceled += instance.OnMouseDelta;
            @MouseScroll.started += instance.OnMouseScroll;
            @MouseScroll.performed += instance.OnMouseScroll;
            @MouseScroll.canceled += instance.OnMouseScroll;
            @MouseMidle.started += instance.OnMouseMidle;
            @MouseMidle.performed += instance.OnMouseMidle;
            @MouseMidle.canceled += instance.OnMouseMidle;
        }

        private void UnregisterCallbacks(IActionMapsActions instance)
        {
            @GetAxisDirectionMove.started -= instance.OnGetAxisDirectionMove;
            @GetAxisDirectionMove.performed -= instance.OnGetAxisDirectionMove;
            @GetAxisDirectionMove.canceled -= instance.OnGetAxisDirectionMove;
            @GetKeyDownJump.started -= instance.OnGetKeyDownJump;
            @GetKeyDownJump.performed -= instance.OnGetKeyDownJump;
            @GetKeyDownJump.canceled -= instance.OnGetKeyDownJump;
            @GetKeyRun.started -= instance.OnGetKeyRun;
            @GetKeyRun.performed -= instance.OnGetKeyRun;
            @GetKeyRun.canceled -= instance.OnGetKeyRun;
            @MouseDelta.started -= instance.OnMouseDelta;
            @MouseDelta.performed -= instance.OnMouseDelta;
            @MouseDelta.canceled -= instance.OnMouseDelta;
            @MouseScroll.started -= instance.OnMouseScroll;
            @MouseScroll.performed -= instance.OnMouseScroll;
            @MouseScroll.canceled -= instance.OnMouseScroll;
            @MouseMidle.started -= instance.OnMouseMidle;
            @MouseMidle.performed -= instance.OnMouseMidle;
            @MouseMidle.canceled -= instance.OnMouseMidle;
        }

        public void RemoveCallbacks(IActionMapsActions instance)
        {
            if (m_Wrapper.m_ActionMapsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IActionMapsActions instance)
        {
            foreach (var item in m_Wrapper.m_ActionMapsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ActionMapsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ActionMapsActions @ActionMaps => new ActionMapsActions(this);
    public interface IActionMapsActions
    {
        void OnGetAxisDirectionMove(InputAction.CallbackContext context);
        void OnGetKeyDownJump(InputAction.CallbackContext context);
        void OnGetKeyRun(InputAction.CallbackContext context);
        void OnMouseDelta(InputAction.CallbackContext context);
        void OnMouseScroll(InputAction.CallbackContext context);
        void OnMouseMidle(InputAction.CallbackContext context);
    }
}
